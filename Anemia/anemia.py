from builtins import float

import streamlit as st
import sklearn
import pandas as pd
import numpy as np
import pickle
import joblib
from Authentication import account
from streamlit_option_menu import option_menu
from database import query


#def load_model():
   # with open('')
def app():
    st.title('B·∫°n ƒëang d·ª± ƒëo√°n :red[THI·∫æU M√ÅU] ü©∏')

    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False

    if not st.session_state.logged_in:
        choice = st.selectbox('Login/Signup', ['ƒêƒÉng nh·∫≠p', 'T·∫°o t√†i kho·∫£n'])
        if choice == 'ƒêƒÉng nh·∫≠p':
            # Email + M·∫≠t kh·∫©u
            email = st.text_input('ƒê·ªãa ch·ªâ Email', placeholder='Enter your email here ...')
            password = st.text_input('M·∫≠t kh·∫©u', type='password', placeholder='Enter your password here ...')

            if st.button('ƒêƒÉng nh·∫≠p'):
                user = query.verify_credentials(email, password)
                if user:
                    # L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o session state
                    st.success(f"Ch√†o m·ª´ng, {user['name']}!")
                    st.balloons()
                    st.session_state['logged_in'] = {'logged_in': True, 'name': user['name'], 'email': user['email'],'phone': user['phone']}

                else:
                    st.error("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")

        elif choice == 'T·∫°o t√†i kho·∫£n':
            # Th√™m c√°c tr∆∞·ªùng t·∫°o t√†i kho·∫£n ·ªü ƒë√¢y (v√≠ d·ª•: t√™n, email, m·∫≠t kh·∫©u)
            name = st.text_input('T√™n c·ªßa b·∫°n')
            email = st.text_input('ƒê·ªãa ch·ªâ Email', placeholder='Enter your email here ...')
            phone = st.text_input('S·ªë ƒëi·ªán tho·∫°i')
            password = st.text_input('M·∫≠t kh·∫©u', type='password', placeholder='Enter your password here ...')

            if st.button('T·∫°o t√†i kho·∫£n'):
                account.app()


    # N·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
    if st.session_state.logged_in:
        with st.expander("Th√¥ng tin c·ªßa b·∫°n"):
            marks1, marks2, marks3 = st.columns(3, gap='large')
            with marks1:
                st.info('Ng∆∞·ªùi d√πng', icon="üë§")
                st.metric(label=st.session_state.logged_in['name'], value='')
            with marks2:
                st.info('S·ªë ƒëi·ªán tho·∫°i', icon="üìû")
                st.metric(label=st.session_state.logged_in['phone'], value='')
            with marks3:
                st.info('S·ªë l·∫ßn test', icon="üß™")
            #   st.metric(label=user_data['test_count'], value='')



    # Chia trang web th√†nh hai c·ªôt
    col1, spacer, col2 = st.columns([2, 1, 2])

#Bat dk nhap tai mooi input

    # B√™n tr√°i: 6 √¥ input
    with col1:
        st.header(":green[NH·∫¨P S·ªê LI·ªÜU]")
        input1 = st.text_input(":green[1 - LYM] ")
        input2 = st.text_input(":green[2 - NEUT] ")
        input3 = st.text_input(":green[3 - MON] ")
        input4 = st.text_input(":green[4 - EOS] ")
        input5 = st.text_input(":green[5 - BASO ] ")
        input6 = st.text_input(":green[6 - HBG  ]")
        input7 = st.text_input(":green[7 - HCT ] ")
        input8 = st.text_input(":green[8 - MCV  ]")
        input9 = st.text_input(":green[9 - MCH ]")
        input10 = st.text_input(":green[10 - MCHC  ]")
        input11 = st.text_input(":green[11 - RDW  ] ")
        input12 = st.text_input(":green[12 - PLT  ] ")
        input13 = st.text_input(":green[13 - MPV  ] ")
        input14 = st.text_input(":green[14 - RBC  ] ")
        input15 = st.text_input(":green[15 - WBC  ] ")


    # B√™n ph·∫£i: layout h√¨nh ch·ªØ nh·∫≠t v·ªõi ch√∫ th√≠ch
    with col2:
        st.header(":green[Ch√∫ th√≠ch]")
        st.markdown(
            """
            <div style="border: 2px solid black; padding: 20px; height: 100%; display: flex; align-items: center; justify-content: center; font-size: 12px;">
                <h3 style="font-size: 16px;">
                1. LYM (Lymphocyte ‚Äì B·∫°ch c·∫ßu Lympho): Lymphocyte l√† c√°c t·∫ø b√†o c√≥ kh·∫£ nƒÉng mi·ªÖn d·ªãch (th∆∞·ªùng t·ª´ 10% - 58.5%L). </br>
                2. NEUT (Neutrophil) - b·∫°ch c·∫ßu trung t√≠nh: B·∫°ch c·∫ßu trung t√≠nh c√≥ ch·ª©c nƒÉng quan tr·ªçng l√† th·ª±c b√†o (th∆∞·ªùng t·ª´ 37% - 80%M). </br>
                3. MON (monocyte) - b·∫°ch c·∫ßu mono: Mono b√†o l√† b·∫°ch c·∫ßu ƒë∆°n nh√¢n, sau s·∫Ω bi·ªát h√≥a th√†nh ƒë·∫°i th·ª±c b√†o (th∆∞·ªùng t·ª´ 0% - 12%M).  </br>
                4. EOS (eosinophils) - b·∫°ch c·∫ßu √°i toan: B·∫°ch c·∫ßu √°i toan c√≥ kh·∫£ nƒÉng th·ª±c b√†o y·∫øu (th∆∞·ªùng t·ª´ 0.1% - 7%E).</br>
                5. BASO (basophils) - b·∫°ch c·∫ßu √°i ki·ªÅm: C√≥ vai tr√≤ quan tr·ªçng trong c√°c ph·∫£n ·ª©ng d·ªã ·ª©ng (th∆∞·ªùng t·ª´ 0.1% - 2.5%).</br>
                6. HBG (Hemoglobin) ‚Äì L∆∞·ª£ng huy·∫øt s·∫Øc t·ªë trong m·ªôt th·ªÉ t√≠ch m√°u (th∆∞·ªùng ·ªü nam t·ª´ 12 - 18 g/dl, ·ªü n·ªØ t·ª´ 12 - 16 g/dl). </br>
                7. HCT (Hematocrit) ‚Äì T·ª∑ l·ªá th·ªÉ t√≠ch h·ªìng c·∫ßu tr√™n th·ªÉ t√≠ch m√°u to√†n ph·∫ßn (th∆∞·ªùng ·ªü nam t·ª´ 45% - 51%, ·ªü n·ªØ t·ª´ 37% - 48%).</br>
                8. MCV (Mean corpuscular volume) ‚Äì Th·ªÉ t√≠ch trung b√¨nh c·ªßa m·ªôt h·ªìng c·∫ßu (th∆∞·ªùng t·ª´ 80 - 97 fl).</br>
                9. MCH (Mean Corpuscular Hemoglobin) ‚Äì L∆∞·ª£ng huy·∫øt s·∫Øc t·ªë trung b√¨nh trong m·ªôt h·ªìng c·∫ßu (th∆∞·ªùng t·ª´ 26 - 32 picogram(pg)).</br>
                10. MCHC (Mean Corpuscular Hemoglobin Concentration) ‚Äì N·ªìng ƒë·ªô trung b√¨nh c·ªßa huy·∫øt s·∫Øc t·ªë hemoglobin trong m·ªôt th·ªÉ t√≠ch m√°u (th∆∞·ªùng t·ª´ 31% - 36%).</br>
                11. RDW (Red Cell Distribution Width) ‚Äì ƒê·ªô ph√¢n b·ªë k√≠ch th∆∞·ªõc h·ªìng c·∫ßu (th∆∞·ªùng t·ª´ 11.5% - 15.5%).</br>
                12. PLT (Platelet Count) ‚Äì S·ªë l∆∞·ª£ng ti·ªÉu c·∫ßu trong m·ªôt th·ªÉ t√≠ch m√°u (th∆∞·ªùng t·ª´ 140 - 440 K/uL).</br>
                13. MPV (Mean Platelet Volume) ‚Äì Th·ªÉ t√≠ch trung b√¨nh c·ªßa ti·ªÉu c·∫ßu trong m·ªôt th·ªÉ t√≠ch m√°u (th∆∞·ªùng t·ª´ 0.0 - 99.8 fL)</br>
                </h3>
            </div>
            """,
            unsafe_allow_html=True
        )

    # Th√™m n√∫t ·ªü gi·ªØa ph√≠a d∆∞·ªõi ph·∫ßn tr√™n
    st.markdown("<br>", unsafe_allow_html=True)  # Th√™m kho·∫£ng tr·∫Øng ƒë·ªÉ ƒë·∫©y n√∫t xu·ªëng d∆∞·ªõi
    predict_button = st.columns(3)[1]  # Chia th√†nh 3 c·ªôt v√† ch·ªçn c·ªôt gi·ªØa

    with predict_button:
        if st.button("D·ª± ƒëo√°n b·ªánh"):
             model_load = joblib.load('Anemia/model_random_forest_classifier.sav')
             #model = pickle.load(open('Anemia/model_random_forest_classifier.sav','rb'))

             input_data = np.array([input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13,input14,input15])



             input_data = [float(x) for x in input_data]

             prediction = model_load.predict([input_data])
             prediction = [int(x) for x in prediction]
             query.insert_anemia(input1, input2, input3, input4, input5, input6, input7, input8, input9, input10,
                                 input11, input12, input13, input14, input15, prediction[0])

             if prediction[0] == 1:
                 st.markdown("""
                                                         <style>
                                                         .error-box {
                                                             padding: 10px;
                                                             border: 2px solid red;
                                                             border-radius: 5px;
                                                             background-color: #f8d7da;
                                                             color: red;
                                                             font-size: 16px;
                                                         }
                                                         </style>
                                                         <div class="error-box">
                                                             <h4>‚ö†Ô∏è M√¥ h√¨nh d·ª± ƒëo√°n b·ªánh nh√¢n B·ªä m·∫Øc b·ªánh.</h4>                      
                                                         </div>
                                                     """, unsafe_allow_html=True)
             else:
                 st.markdown("""
                                   <style>
                                   .success-box {
                                       padding: 10px;
                                       border: 2px solid green;
                                       border-radius: 5px;
                                       background-color: #dff0d8;
                                       color: green;
                                       font-size: 16px;
                                   }
                                   </style>
                                   <div class="success-box">
                                       <h4>üéâ M√¥ h√¨nh d·ª± ƒëo√°n b·ªánh nh√¢n KH√îNG m·∫Øc b·ªánh.</h4>
                                   </div>
                               """, unsafe_allow_html=True)






